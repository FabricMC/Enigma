configurations {
    proGuard
}

dependencies {
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'org.ow2.asm:asm-tree:9.2'
    implementation 'org.ow2.asm:asm-util:9.2'

    implementation 'net.fabricmc:procyon-fabric-compilertools:0.5.35.13'
    implementation 'net.fabricmc:cfr:0.0.6'

    proGuard 'com.guardsquare:proguard-base:7.2.0-beta1'
}

// Generate "version.txt" file

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionFile {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = "${project.version}"
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionFile

// Generate obfuscated JARs for tests

def libraryJarsArg = "<java.home>/jmods"

// If your test fails for class file version problem with proguard, run gradle with -Dorg.gradle.java.home="<older jdk>" flag
file('src/test/java/cuchaz/enigma/inputs').listFiles().each { theFile ->
    if (theFile.directory) {
        task("${theFile.name}TestJar", type: Jar) {
            from(sourceSets.test.output) {
                include "cuchaz/enigma/inputs/$theFile.name/**/*.class"
                include 'cuchaz/enigma/inputs/Keep.class'
            }

            archiveFileName = theFile.name + '.jar'
            destinationDirectory = file('build/test-inputs')
        }

        task("${theFile.name}TestObf", type: JavaExec,
                dependsOn: "${theFile.name}TestJar") {
            main 'proguard.ProGuard'
            classpath configurations.proGuard

            args '@src/test/resources/proguard-test.conf', '-injars', file('build/test-inputs/' +
                    "${theFile.name}.jar"), '-libraryjars', libraryJarsArg,
                    '-outjars', file('build/test-obf/' + "${theFile.name}.jar")
        }

        test.dependsOn "${theFile.name}TestObf"
    }
}

test.dependsOn 'translationTestObf'
